name: Build test

on:
  workflow_dispatch:
  pull_request:

jobs:
  test-firmware:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v4

      # Pull the latest image from Docker Hub
      - name: Pull docker image
        run: docker pull dangerklippers/klipper-build:latest

      - name: Run firmware build tests
        run: |
          # Get the configs
          CONFIGS=$(./scripts/ci-build.sh list-configs)
          # Parse the JSON to get the array of configs
          CONFIGS_ARRAY=$(echo $CONFIGS | jq -r '.configs[]')
          
          # Set up error tracking
          FAILED_CONFIGS=""
          EXIT_CODE=0
          
          # Run each config test
          for CONFIG in $CONFIGS_ARRAY; do
            echo "::group::Testing config: $CONFIG"
            if docker run -v $PWD:/klipper dangerklippers/klipper-build:latest ./scripts/ci-build.sh compile $CONFIG; then
              echo "Config $CONFIG passed"
            else
              echo "::error::Config $CONFIG failed"
              FAILED_CONFIGS="$FAILED_CONFIGS $CONFIG"
              EXIT_CODE=1
            fi
            echo "::endgroup::"
          done
          
          # Report failures
          if [ $EXIT_CODE -ne 0 ]; then
            echo "::error::The following configs failed: $FAILED_CONFIGS"
            exit $EXIT_CODE
          fi

  test-python:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11', '3.12', '3.13']
      fail-fast: false
    steps:
      - uses: actions/checkout@v4

      # Pull the latest image from Docker Hub
      - name: Pull docker image
        run: docker pull dangerklippers/klipper-build:latest

      - name: Test Klippy (Python ${{ matrix.python-version }})
        run: docker run -v $PWD:/klipper dangerklippers/klipper-build:latest uv run --python ${{ matrix.python-version }} py.test -n auto
